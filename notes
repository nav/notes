#!/usr/bin/env bash

COMMAND=${1:-usage}
ARG1=${2} # Multipurpose. See below for usage


APP_NAME=notes
CONFIG_FILE=${HOME}/.config/notes/config
DEBUG=${DEBUG:-0}
TOKEN_FILE=${HOME}/.config/notes/token


_usage() {
  cat <<EOF
Usage: [DEBUG=1] ${0} <command>

This script allows you to copy data to S3. You need a few things in place to use
this tool. You must have aws-cli and jq installed.

Additionally, you need to provide:
 - Name of the AWS profile if it's different from "default"
 - ARN of the role that can be assumed when copying files to S3
 - Name of the S3 Bucket where files will be uploaded
 - Local directory to be used for syncing

Set DEBUG=1 to enable debug messages.

Positional arguments:

init              Create notes configuration.
push              Push and sync data with S3.
pull              Pull data from S3 into empty folder.
link <object>    Generate presigned link to a private object.

EOF
}

_check_config_location() {
  CONFIG_LOCATION=$(dirname ${CONFIG_FILE})
  # Ensure config location is writable
  # Ensire config location exists
  mkdir -p ${CONFIG_LOCATION}
  chmod -R 700 ${CONFIG_LOCATION}
}

_check_requirements() {
  REQS="aws jq"
  for REQ in $REQS; do
    command -v ${REQ} >/dev/null && continue || { echo "${REQ} is not installed."; exit 1; }
  done
}

_check_token_expiry() {
  # Default expiry of token is 15 mins. We remove token if it's older than 14 mins
  find ${TOKEN_FILE} -mmin +14 -exec rm {} \; &> /dev/null
}


_get_token() {
  _check_token_expiry;

  if [ -f "${TOKEN_FILE}" ]; then
    TOKEN=$(cat ${TOKEN_FILE})
    [ ${DEBUG} == "1" ] && echo "Reusing existing authentication token."
  else
     source ${CONFIG_FILE}
     TOKEN=$(aws --profile=${AWS_PROFILE} sts assume-role \
       --role-arn ${AWS_ROLE_ARN} \
       --role-session-name \
       ${APP_NAME}-role-assume-role)
        
     echo ${TOKEN} > ${TOKEN_FILE}
     chmod 600 ${TOKEN_FILE}
    
     [ ${DEBUG} == "1" ] && echo "Authentication token renewed."
  fi

  export AWS_ACCESS_KEY_ID=$(echo ${TOKEN} | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo ${TOKEN} | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo ${TOKEN} | jq -r '.Credentials.SessionToken')
  export AWS_REGION=${AWS_REGION:-us-west-2}
  export AWS_ACCOUNT=$(aws --profile=${AWS_PROFILE} sts get-caller-identity | jq -r '.Account')
}

###

init() {
  _check_config_location;

  AWS_PROFILE=
  AWS_ROLE_ARN=
  S3_BUCKET=
  SYNC_DIR=

  read -p "Enter AWS profile name [default]: " AWS_PROFILE
  AWS_PROFILE=${AWS_PROFILE:-default}
  read -p "Enter AWS Role ARN: " AWS_ROLE_ARN
  read -p "Enter S3 Bucket name: " S3_BUCKET
  read -p "Enter local directory to sync [~/Notes]: " SYNC_DIR
  SYNC_DIR=${SYNC_DIR:-${HOME}/Notes}

  touch ${CONFIG_FILE}
  chmod 600 ${CONFIG_FILE}
  echo "AWS_PROFILE=${AWS_PROFILE}" >> ${CONFIG_FILE}
  echo "AWS_ROLE_ARN=${AWS_ROLE_ARN}" >> ${CONFIG_FILE}
  echo "S3_BUCKET=${S3_BUCKET}" >> ${CONFIG_FILE}
  echo "SYNC_DIR=${SYNC_DIR}" >> ${CONFIG_FILE}

  echo "Initialized."
}


pull() {
  source ${CONFIG_FILE}
  _get_token;
  aws s3 sync s3://${S3_BUCKET} ${SYNC_DIR}
}

push() {
  source ${CONFIG_FILE}
  _get_token;
  aws s3 sync ${SYNC_DIR} s3://${S3_BUCKET} --exclude "*.DS_Store*"
}

link() {
  source ${CONFIG_FILE}
  _get_token;
  aws s3 presign s3://${S3_BUCKET}/${ARG1}
}


### 

_check_requirements;

if [ $COMMAND = "init" ]; then
  if [ -f "${CONFIG_FILE}" ]; then
     echo "Config file (${CONFIG_FILE}) already exists. Remove it before initializing again."
     exit 1
  fi
  init;
  pull;
elif [ $COMMAND = "pull" ]; then
  pull;
elif [ $COMMAND = "push" ]; then
  push;
elif [ $COMMAND = "link" ]; then
  link;
else
  _usage;
fi
